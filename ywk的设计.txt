ywk想的结构：
思路：把问题分成时间片，每个时间片的起始，更新每个楼层等待的人数。
    然后，电梯的移动是离散的，比如一片时间走三层（没法考虑起停）
    在时间片的结尾上下客（或者电梯直接跳过，等下一个时间片）。
    这样的话算法可能好写点吧。
生成输入数据 ：
    1.由命令行读入运行指标（电梯数，载客量，楼层数，单位时间片内每楼层平均到达人数，
    运行模拟时间，电梯速度。。。。）这段ywk来写
    2.由一个函数调用:void update(level_info*)来更新楼层信息。（已找到明确的生成泊松
      分布的算法－计算每个取值的概率，作为长度来覆盖［0,1］区间，然后生成随机数，落在
      区间上）。对新到来的人，分配随机的目的地。
      ywk写生成高随机数的，lsy写生成泊松分布的
电梯管理：
    1.读入运行指标，初始化。
    2.用时间片循环－a：调用update；b：<-$根据当前状态，决定电梯去向$->；c：执行
    具体的算法：
        这块一人选一个／几个算法来写。
        首先，对于单个电梯：
            1.直上直下，从最低有人上下的楼到最高有人上下的楼，中间按需上下客。
            2.根据梯内多数意见决定是上还是下。中间有空位的话就停，否则越过
            。。。
        然后考虑多个：
            1.给不同电梯分配奇偶层／mod 3同余层／mod 4 同余层。。。。
            2.分段，区间运行［1－10］,［10－20］.。。。可以重叠。
            。。。。
可视化：
    最好是，把（例如）1000个时间片的运行状态都算完之后存起来，可视化部分一次性处理。
    离线处理视频比较方便。
    lsy写记录运行数据的，ywk写可视化部分。

